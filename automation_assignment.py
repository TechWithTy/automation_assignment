# -*- coding: utf-8 -*-
"""Automation_Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cHLpjlFniQDQexf_iEjhy99YgROhmnZd

#Before Getting Started
1. **Understand the problem:**
-pick a website/webpage to automate 

-make sure to pull data from HTML table 

-make sure to pull data from nested DIVs

-need to demonstrate data scraping with both of the above scenarios

Ex. In either an HTML table or nested DIVs. Search on “A” and bring back “B”.  We have a list of bicycles that contain bicycle color, bicycle size, bicycle price and bicycle availability.  Use one of those criteria as the search to show me the other bicycle attributes (search on size bring back size, color, availability and price).

-include string manipulation (convert string to number, trim/split/pop)

-want to see data collected and buttons clicked from a modal window 

2. **Break down the problem into smaller steps:** 



 
Bs4 
-Find and click a modal with playwright (**faster new selenium**), output clicked modal element,data collected

1.   -Choose a website that has search capabilties
2.  Show modal element and click button element 
3.   -We could use a url search query but we are demonstarting automation capabilities. EX- ```https://telfar.net/search?q=red&type=product%2Cpage&options%5Bunavailable_products%5D=last&options%5Bprefix%5D=last``` instead of inputing that url we are searching manually 
4. -Pull nested Div data From Website for search criteria using Bs4
5. -Pull html table data From Website for search criteria using 
6. Perform String manipulation 



3. **Define the inputs and outputs**: The inputs are a link to a website to scrape and the search criteria.

4. **Use descriptive language**: I need to scrape data from a website, using search criteria and click on a modal progrmatically. After this the data for the first 3 items (all attributes) should be output along with the element that was clicked on.

5. **Number the steps**: 


1- Choose a website that has search capabilties 

2- Pull nested Div data From Website for search criteria using Bs4

3- Pull html table data From Website for search criteria using Bs4 

4- Find and click a modal with playwright (**faster new selenium**), output clicked modal element,data collected

5- include string manipulation (convert string to number, trim/split/pop)

6. Review and refine: After you have written the algorithm, review it carefully to ensure that it is correct and complete. Look for any errors or omissions and refine the algorithm as needed.

# Getting Started

@title Instructions



1.   Click Run all or **ctrl+f9**
2.   Wait for output 🤖
"""

# Commented out IPython magic to ensure Python compatibility.
#@title Installation
# %pip install typing
# %pip install bs4
# %pip install tabulate
# %pip install playwright
!playwright install
# %pip install asyncio

init_quotes = [    "Success is not final, failure is not fatal: it is the courage to continue that counts. - Winston Churchill",    "I have not failed. I've just found 10,000 ways that won't work. - Thomas Edison",    "Success consists of going from failure to failure without loss of enthusiasm. - Winston Churchill",    "Only those who dare to fail greatly can ever achieve greatly. - Robert F. Kennedy",    "It is hard to fail, but it is worse never to have tried to succeed. - Theodore Roosevelt",    "Failure is the condiment that gives success its flavor. - Truman Capote",    "Success is stumbling from failure to failure with no loss of enthusiasm. - Winston Churchill",    "There is only one thing that makes a dream impossible to achieve: the fear of failure. - Paulo Coelho",    "Don't be afraid of failure; be afraid of petty success. - Maude Adams",    "I've missed more than 9000 shots in my career. I've lost almost 300 games. 26 times I've been trusted to take the game winning shot and missed. I've failed over and over and over again in my life. And that is why I succeed. - Michael Jordan"]

# from rich import print as prt
from IPython.display import clear_output
from typing import Optional, List, Dict, Any
import builtins
import random
from typing import List
import requests
from bs4 import BeautifulSoup
import asyncio
from tabulate import tabulate



BLACK = '\033[30m'
RED = '\033[31m'
GREEN = '\033[32m'
YELLOW = '\033[33m'
BLUE = '\033[34m'
MAGENTA = '\033[35m'
CYAN = '\033[36m'
WHITE = '\033[37m'


def make_table(string: str ,data: list):
  print(f"[{string}]",tabulate(data, headers="keys" ))

def check_errors_in_string(string: str):
        if hasattr(builtins, string):
            return string
        return False


def ps( text: str = "No Additional Info Added",color: str = BLACK,data: List = []):
  is_success =  BLUE
  errors = check_errors_in_string(text)
 
  if(data and len(data) > 10):
    is_success = GREEN if errors == False else RED
    print(f"{color}\n{text}\033[0m",f"{is_success}\n{make_table(text,data)}\033]0m")
  else:
    print(f"{color}\n{text}\033[0m",f"{is_success}\n{init_quotes[ random.randint(0, 9)]}\033]0m")

clear_output()

ps("Dependencies Installed!")

"""# Tests"""

# #tests

"""# Main Function"""

#@title Get All Input Fields

def find_input_fields(url: str) -> List[str]:
    # Send a GET request to the URL
    response = requests.get(url)

    # Parse the HTML content with BeautifulSoup
    soup = BeautifulSoup(response.content, 'html.parser')

    # Find all input fields with id="searchInput"
    input_fields = []
    for input_field in soup.find_all('input', {'id': 'searchInput'}):
        input_fields.append(input_field)

    return input_fields


input_fields = find_input_fields('https://telfar.net/')
print(input_fields)

x_button = '<button tabindex="0" class="needsclick klaviyo-close-form kl-private-reset-css-Xuajs1" style="right: 0px; top: 0px; position: absolute; z-index: 6; cursor: pointer; height: 25px; width: 25px; margin-right: 8px; margin-top: 8px;"><svg role="img" width="25" height="25" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" aria-labelledby="close-form-1" class="needsclick  kl-private-reset-css-Xuajs1"><title id="close-form-1">Close form 1</title><circle cx="10" cy="10" r="9.5" fill="rgba(180,187,195,0)" stroke="rgba(255,255,255,0)" style="cursor: pointer;"></circle><path d="M6 6L14 14M6 14L14 6L6 14Z" stroke="rgba(55,63,71,0.7)" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" style="cursor: pointer;"></path></svg></button>'
modal = '<form class="needsclick klaviyo-form klaviyo-form-version-cid_1 kl-private-reset-css-Xuajs1" data-testid="klaviyo-form-TDSeqr" novalidate="" tabindex="-1" style="display: flex; flex-direction: row; box-sizing: border-box; width: 400px; min-width: 200px; max-width: 1000px; border-radius: 0px; border-style: solid; border-width: 1px; border-color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); background-repeat: no-repeat; background-position-y: 50%; padding: 20px; flex: 1 1 0%;"><div class="needsclick  kl-private-reset-css-Xuajs1" style="display: flex; flex-direction: column; width: 100%; margin: 0px; padding: 0px; min-height: 174px; justify-content: center;"><div data-testid="form-row" class="needsclick  kl-private-reset-css-Xuajs1" style="display: flex; flex-direction: row; align-items: stretch; position: relative;"><div component="[object Object]" data-testid="form-component" class="needsclick  kl-private-reset-css-Xuajs1" style="display: flex; justify-content: flex-start; padding: 5px 6px 24px; position: relative; flex: 1 0 0px;"><div class="kl-private-reset-css-Xuajs1 go3176171171" style="width: 100%;"><div style="text-align: center;"><span style="font-family: Helvetica, Arial, sans-serif; font-weight: 400; font-size: 13px;">EVERY SHOPPING BAG, EVERY COLOR, AND EVERYTHING ELSE. SUBSCRIBE FOR UPDATES.</span></div></div></div></div><div data-testid="form-row" class="needsclick  kl-private-reset-css-Xuajs1" style="display: flex; flex-direction: row; align-items: stretch; position: relative;"><div component="[object Object]" data-testid="form-component" class="needsclick  kl-private-reset-css-Xuajs1" style="display: flex; justify-content: flex-start; padding: 0px 4px; position: relative; flex: 1 0 0px;"><div class="needsclick  kl-private-reset-css-Xuajs1" style="display: flex; flex-grow: 1; flex-direction: column; align-self: flex-end;"><input id="email_48093458" class="needsclick go854821512 kl-private-reset-css-Xuajs1" type="email" autocomplete="email" name="email" tabindex="0" placeholder="Email" aria-label="Email" aria-invalid="false" options="[object Object]" style="box-sizing: border-box; border-radius: 0px; padding: 0px 0px 0px 16px; height: 54px; text-align: left; color: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 14px; font-weight: 400; letter-spacing: 0px; background-color: rgb(255, 255, 255); border: 1px solid rgb(180, 187, 195);"><div class="needsclick  kl-private-reset-css-Xuajs1" style="width: 100%; position: relative;"></div></div></div></div><div data-testid="form-row" class="needsclick  kl-private-reset-css-Xuajs1" style="display: flex; flex-direction: row; align-items: stretch; position: relative;"><div component="[object Object]" data-testid="form-component" class="needsclick  kl-private-reset-css-Xuajs1" style="display: flex; justify-content: flex-start; padding: 12px 4px 0px; position: relative; flex: 1 0 0px;"><button class="needsclick go3894874857 kl-private-reset-css-Xuajs1" type="button" tabindex="0" style="background: rgb(7, 7, 7); border-radius: 18px; border-style: none; border-color: rgb(23, 130, 76); border-width: 2px; color: rgb(255, 255, 255); font-family: Helvetica, Arial, sans-serif; font-size: 14px; font-weight: 700; letter-spacing: 0px; line-height: 1; white-space: normal; padding-top: 0px; padding-bottom: 0px; text-align: center; word-break: break-word; align-self: flex-end; cursor: pointer; height: 40px; width: 100%;">SUBSCRIBE</button></div></div></div><input type="submit" tabindex="-1" value="Submit" style="display: none;"></form>'

#@title Main Function


from playwright.async_api import async_playwright, Playwright
from playwright.sync_api import Playwright, sync_playwright

search_output = []

async def main(playwright: Playwright,query: str) -> None:

    browser = await playwright.chromium.launch()
    page = await browser.new_page()
    await page.goto('https://telfar.net')

    await page.type('#searchInput', query)
    await page.keyboard.press('Enter')
    await page.wait_for_selector('.product__title')
    #print page with bs4
    html = await page.content()
    soup = BeautifulSoup(html, 'html.parser')
    
    #html table/grid
    product_items = soup.find_all('div', class_='product grid__item one-whole slide-up-animation animated')
    
    for item in product_items:
      #nested div
      product_title = item.find('div', class_='product__title').a.text.strip()
      #string manipulation 
      product_price = item.find('span', class_='product__price').text.strip()
      index = product_price.find('$')  # Find the position of the first dollar sign
      product_price_formatted = product_price[index:]
     
      product_url =" https://telfar.net" + item.find('a', class_='product__image-wrapper').get('href').strip()
      search_output.append({
          'title': product_title,
          'price': product_price_formatted,
          'url': product_url
      })
    make_table("search output",search_output)
    #print modal and x_button
    
    test_modal = soup.find('div', {'role': 'dialog', 'aria-label': 'FLYOUT Form', 'aria-modal': 'true', 'class': 'needsclick  kl-private-reset-css-Xuajs1'})
    test_x_button = soup.find('button', {'id': 'my-button'})
    
    # if(test_modal):
    #   modal = test_modal
    #   x_button = test_x_button

    print(modal)
    print(x_button)
    await browser.close()
   


#google colab issue 
async with async_playwright() as playwright:
    query = "red"
    await main(playwright,query)

"""# Depricated Code"""

#@title BS4 Method

#Depricated

#@title Playwright Method

#depricated

"""# OutPut"""

#@title Output
make_table("search output",search_output)
print(modal)
print(x_button)

"""# Conclusion

#Hypothesis 1
1. Observation: Our Team needs to test our new website with automation software.

2. Question: How can i gather as much high quality data as quickly as possible with as little input from the user as possible

3. Hypothesis: I hypothesize that getting the data via their API would be most efficient, but sence this a testing project playwright and bs4 will be the next best solution 

4. Prediction: this will be the fastest method to complete this task as playwright is superiour 

There are several reasons why Playwright is considered better than Selenium:

Faster and more efficient: Playwright is built on top of the latest web automation technologies and is designed to be faster and more efficient than Selenium.

Cross-browser support: Playwright supports multiple browsers, including Chromium, Firefox, and Safari, out of the box, while Selenium requires additional drivers and configurations for each browser.

Better debugging and error reporting: Playwright provides detailed error messages and stack traces, making it easier to diagnose and fix issues. It also has built-in debugging capabilities that allow developers to step through code and inspect page elements.

Robustness: Playwright is built to handle modern web applications that make heavy use of JavaScript, CSS, and other web technologies. It is more reliable than Selenium when dealing with complex web applications.

Headless mode: Playwright has a built-in headless mode, which means it can run in the background without displaying a browser window, making it ideal for running automated tests in a continuous integration (CI) environment.



5. Experimentation: Create Automations using BS4 and Playwright

6. Analysis: This method took less than one minuete to execute this a big(o) score of o(n) making it the ideal case for this task

7. Conclusion: Based on my hypothesis using playwright and bs4 for automation testing is ideal.
"""